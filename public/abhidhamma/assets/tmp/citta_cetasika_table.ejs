<!DOCTYPE html>
<head>

</head>
<body>

  <header>
    <h1>Header</h1>
    <nav>
      <ul>
        <li><a href="/link1">Link 1</a></li>
        <li><a href="/link2">Link 2</a></li>
        <li><a href="/link3">Link 3</a></li>
      </ul>
    </nav>
    <form target="/search">
      <input name="q" type="search">
      <input type="submit">
    </form>
  </header>

  <setction>
     <hgroup>
       <h1>Main Heading</h1>
       <h2>Sub Heading</h2>
     </hgroup>
     <p>
       some text
     </p>

     <article>
       <header>
         <h1>Blog Title</h2>
         <p>Some text about it</p>
       </header>
       <section>
         body
       </section>
     </article>

     <aside>
       side bar
     </aside>

     <section>
       Human-readable vertion of time:
       <time datetime="2011-06-01T18:00:00+01:00">6 o'clock on 1/6/2011</time>

       <figure>
         <img src="scenery.jpg" alt="Picture of the Myan">
         <figcaption>Looking out into the view</figcaption>
       </figure>

       <strong>similar to b element</strong>
       <em>similar to i element</em>

       <p>
         The HTML5 solution to both the validation and potential name-clash
         issues is the data-* attribute collection. The * is a wildcard—that is,
         it can be whatever you want it to be. But anything starting with
         data- will be allowed through the validator, and you’re guaranteed
         that no data-* attributes will be made part of HTML.
       </p>
     </section>

     <section>

      <select size="3">
          <option selected>Option 1</option>
          <option>Option 2</option>
          <option>Option 3</option>
      </select>

      <textarea>abc</textarea>

      <label for="exradio1">Radio 1: </label>
      <input type="radio" id="exradio1" name="exradio">
      <label for="exradio2">Radio 2: </label>
      <input type="radio" id="exradio2" name="exradio">
      <label for="exradio3">Radio 3: </label>
      <input type="radio" id="exradio3" name="exradio" selected>

      The fieldset and legend elements are useful for grouping sets of
      controls together in long forms.
      When used correctly, they’re also good for accessibility.

     <fieldset title="fieldset title example">
      <legend>Fieldset Title</legend>
        <label>
          Upload file
          <input type="file" name="name">
        </label>
      </fieldset>
      <input type="submit">

      The basic number input provides a spinbox:
      <input type="number" value="4">
      <input type="number" value="4" step="2">

      <input type="range" min="1" max="10" value="2">
      The exact value of the range input isn’t clearly visible. In practice,
      you might use it for large numbers where accuracy isn’t important.
      <input type="range" min="0" max="100" value="20" step="20">

      <input type="date">
      <input type="time" value="10:30">
      If you want the user’s local time, use datetime-local:
      <input type="datetime-local" value="2010-05-31T21:00">
      As well as full dates, you can have months or weeks:
      <input type="month" value="2010-05">
      <input type="week">

      You can add the required attribute to any type of input:
      <input type="text" required name="myrequiredfield">

      You can use the min and max attributes on the number input type:
      <input type="number" min="4" name="exnumber">

      <input type="text" name="partno"
           pattern="[0-9][A-Z]{3}"
           title="A part number is a digit followed by three uppercase letters.">

      <input type="email">
      <input type="url">
      <input type="tel">

      placeholder attribute
      <input type="email" placeholder="email@example.com">

      autofocus attribute
      <input type="text" autofocus>

      autocomplete attribute
      <label>Account: <input type="text" name="ac" autocomplete="off"></label>
      <label>PIN: <input type="password" name="pin" autocomplete="off"></label>

      Here’s a simple pair of CSS rules to put a green outline around valid controls and a dotted red outline around invalid controls:
      <pre>
      input:valid {
          outline: 5px solid green;
      }

      input:invalid {
          outline: 5px dashed red;
      }

      There’s also CSS support for styling required controls differently through pseudo-classes:
      input:required {
          outline: 5px dashed blue;
      }
      input:optional {
          outline: 5px solid green;
      }
      </pre>

      The "novalidate" attribute can be applied to the form element itself,
        whereas the "formnovalidate" attribute affects the enter form but should
        be applied only to a Submit button:

      <input type="submit" value="Save for Later" formnovalidate>

      <pre>
        &lt;output&gt; element
        &lt;progress&gt; element
        &lt;meter&gt; element
      </pre>
     </section>
  </section>

  <footer>
    <small>Copyright 2014</small>
  </footer>
</body>
</html>
